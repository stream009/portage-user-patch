From 1627ef7017e5bd81a1b2c527954692cb09ae8276 Mon Sep 17 00:00:00 2001
From: stream <stream009@gmail.com>
Date: Sat, 20 Dec 2014 16:32:36 +0900
Subject: [PATCH] Add logging support

---
 transfer-plugins/curl/curlthread.cpp          | 61 +++++++++++++++++++++++++++
 transfer-plugins/curl/curlthread.h            |  1 +
 transfer-plugins/curl/curlthread_p.h          |  5 +++
 transfer-plugins/curl/curltransfer.cpp        | 15 +++++++
 transfer-plugins/curl/curltransfer.h          | 11 ++++-
 transfer-plugins/curl/curltransferfactory.cpp |  7 +++
 transfer-plugins/curl/curltransferfactory.h   |  3 ++
 7 files changed, 102 insertions(+), 1 deletion(-)

diff --git a/transfer-plugins/curl/curlthread.cpp b/transfer-plugins/curl/curlthread.cpp
index dee4bbd..b5810bc 100644
--- a/transfer-plugins/curl/curlthread.cpp
+++ b/transfer-plugins/curl/curlthread.cpp
@@ -5,7 +5,11 @@
 
 #include <string>
 
+#include <boost/algorithm/string/classification.hpp>
+#include <boost/algorithm/string/finder.hpp>
 #include <boost/algorithm/string/predicate.hpp>
+#include <boost/algorithm/string/split.hpp>
+#include <boost/format.hpp>
 #include <boost/lexical_cast.hpp>
 #include <boost/regex.hpp>
 
@@ -169,6 +173,10 @@ void CurlThread::Private::fetchBody()
 
     m_curl.setOption(CURLOPT_FOLLOWLOCATION, 1);
 
+    m_curl.setOption(CURLOPT_VERBOSE, 1);
+    m_curl.setOption(CURLOPT_DEBUGFUNCTION, &debugCallback);
+    m_curl.setOption(CURLOPT_DEBUGDATA, this);
+
     m_curl.perform();
 }
 
@@ -188,6 +196,14 @@ void CurlThread::Private::emitProgress(const qlonglong downloaded,
     emit m_public.progress(downloaded, speed);
 }
 
+void CurlThread::Private::emitLog(const std::string &line) const
+{
+    const QString &trimmed = QString::fromUtf8(line.c_str()).trimmed();
+    if (trimmed.isEmpty()) return;
+
+    emit m_public.log(trimmed);
+}
+
 size_t CurlThread::Private::headerCallback(char* const ptr, const size_t size,
                                            const size_t nmemb, void* const o)
 {
@@ -312,5 +328,50 @@ void CurlThread::Private::slotConfigChanged()
     assert(m_updateInterval);
 }
 
+void CurlThread::Private::
+printRequest(const std::string &request)
+{
+    typedef std::string::const_iterator Iterator;
+    typedef boost::iterator_range<Iterator> Range;
+    typedef boost::split_iterator<Iterator> SplitIt;
+    SplitIt it = boost::make_split_iterator(request,
+                            boost::token_finder(boost::is_any_of("\r\n")));
+    for (; !it.eof(); ++it) {
+        const Range &line = *it;
+        if (line.empty()) continue;
+        emitLog(str(boost::format("HTTP Request: %s") % line));
+    }
+}
+
+size_t CurlThread::Private::
+debugCallback(CURL*, const curl_infotype type, char * const ptr,
+    const size_t size, void * const data)
+{
+    Private* const obj = static_cast<Private*>(data);
+    const std::string text(ptr, size);
+
+    switch (type) {
+    case CURLINFO_TEXT:
+        obj->emitLog(text);
+        break;
+    case CURLINFO_HEADER_IN:
+        obj->emitLog(str(boost::format("HTTP Response: %s") % text));
+        break;
+    case CURLINFO_HEADER_OUT:
+        obj->printRequest(text);
+        break;
+    case CURLINFO_DATA_IN:
+    case CURLINFO_DATA_OUT:
+    case CURLINFO_SSL_DATA_IN:
+    case CURLINFO_SSL_DATA_OUT:
+        break;
+    default:
+        obj->emitLog(str(boost::format("Unknown: %s") % text));
+        break;
+    }
+
+    return 0;
+}
+
 #include "curlthread_p.moc"
 #include "curlthread.moc"
diff --git a/transfer-plugins/curl/curlthread.h b/transfer-plugins/curl/curlthread.h
index 40129a2..427024f 100644
--- a/transfer-plugins/curl/curlthread.h
+++ b/transfer-plugins/curl/curlthread.h
@@ -31,6 +31,7 @@ signals:
     void progress(const qlonglong downloaded, const double bytePerSec) const;
     void finish(const qlonglong) const;
     void abort();
+    void log(QString) const;
 
 private:
     struct Private;
diff --git a/transfer-plugins/curl/curlthread_p.h b/transfer-plugins/curl/curlthread_p.h
index b7bdba7..6c47638 100644
--- a/transfer-plugins/curl/curlthread_p.h
+++ b/transfer-plugins/curl/curlthread_p.h
@@ -77,6 +77,7 @@ public:
     void emitTotalSize(const qlonglong size) const;
     void emitProgress(const qlonglong downloaded,
                       const double bytePerSec) const;
+    void emitLog(const std::string &line) const;
 
     bool handleContentLength(const std::string &line);
     bool handleContentDisposition(const std::string &line);
@@ -87,6 +88,10 @@ public:
                                 curl_off_t dlnow, curl_off_t, curl_off_t);
     static size_t writeCallback(char* const ptr, const size_t size,
                                 const size_t nmemb, void* const data);
+    static size_t debugCallback(CURL*, curl_infotype , char * const ptr,
+                                const size_t size, void * const data);
+
+    void printRequest(const std::string &);
 
 private slots:
     void slotConfigChanged();
diff --git a/transfer-plugins/curl/curltransfer.cpp b/transfer-plugins/curl/curltransfer.cpp
index 73b12ef..cfd0745 100644
--- a/transfer-plugins/curl/curltransfer.cpp
+++ b/transfer-plugins/curl/curltransfer.cpp
@@ -45,6 +45,9 @@ try {
     this->connect(
         m_curlThread.get(), SIGNAL(finish(const qlonglong)),
                       this,   SLOT(slotFinished(const qlonglong)));
+    this->connect(
+        m_curlThread.get(), SIGNAL(log(QString)),
+                      this,   SLOT(slotLog(const QString&)));
 
     m_curlThread->start();
 
@@ -111,3 +114,15 @@ void CurlTransfer::slotFinished(const qlonglong downloaded)
     this->setTransferChange(Tc_Status | Tc_DownloadedSize |
                             Tc_Percent | Tc_DownloadSpeed, true);
 }
+
+void CurlTransfer::slotLog(const QString &message)
+{
+    this->setLog(message);
+}
+
+/// CurlTransferHandler ///
+CurlTransferHandler::
+CurlTransferHandler(CurlTransfer * const transfer,
+                    Scheduler * const scheduler)
+    : TransferHandler(transfer, scheduler), LoggingHandler(*transfer)
+{}
diff --git a/transfer-plugins/curl/curltransfer.h b/transfer-plugins/curl/curltransfer.h
index eb1f218..9a70e81 100644
--- a/transfer-plugins/curl/curltransfer.h
+++ b/transfer-plugins/curl/curltransfer.h
@@ -4,11 +4,13 @@
 #include <boost/noncopyable.hpp>
 #include <boost/scoped_ptr.hpp>
 
+#include "core/logging.h"
 #include "core/transfer.h"
+#include "core/transferhandler.h"
 
 class CurlThread;
 
-class CurlTransfer : public Transfer, boost::noncopyable
+class CurlTransfer : public Transfer, public Logging, boost::noncopyable
 {
     Q_OBJECT
 public:
@@ -29,9 +31,16 @@ private slots:
     void slotTotalSize(const qlonglong);
     void slotProgress(const qlonglong downloaded, const double speed);
     void slotFinished(const qlonglong);
+    void slotLog(const QString &message);
 
 private:
     boost::scoped_ptr<CurlThread> m_curlThread;
 };
 
+class CurlTransferHandler : public TransferHandler, public LoggingHandler
+{
+public:
+    CurlTransferHandler(CurlTransfer * const, Scheduler * const);
+};
+
 #endif // CURLTRANSFER_H
diff --git a/transfer-plugins/curl/curltransferfactory.cpp b/transfer-plugins/curl/curltransferfactory.cpp
index b81c586..746f114 100644
--- a/transfer-plugins/curl/curltransferfactory.cpp
+++ b/transfer-plugins/curl/curltransferfactory.cpp
@@ -22,6 +22,13 @@ Transfer *CurlTransferFactory::createTransfer(
     return new CurlTransfer(parent, this, scheduler, src, dest, e);
 }
 
+TransferHandler *CurlTransferFactory::
+createTransferHandler(Transfer * const transfer, Scheduler * const scheduler)
+{
+    CurlTransfer * const curlTransfer = static_cast<CurlTransfer*>(transfer);
+    return new CurlTransferHandler(curlTransfer, scheduler);
+}
+
 bool CurlTransferFactory::isSupported(const KUrl &url) const
 {
     static const QStringList protocols = QStringList() << "http";
diff --git a/transfer-plugins/curl/curltransferfactory.h b/transfer-plugins/curl/curltransferfactory.h
index ed8b6db..7e27531 100644
--- a/transfer-plugins/curl/curltransferfactory.h
+++ b/transfer-plugins/curl/curltransferfactory.h
@@ -16,6 +16,9 @@ public:
     virtual Transfer *createTransfer(const KUrl &src, const KUrl &dest,
                            TransferGroup *parent, Scheduler *scheduler,
                            const QDomElement *n = 0);
+
+    virtual TransferHandler *createTransferHandler(Transfer *, Scheduler *);
+
     virtual bool isSupported(const KUrl &) const;
 
     //virtual QString displayName();
-- 
2.2.1

